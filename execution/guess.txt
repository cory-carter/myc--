----------source

string responsePrefix(int guess, int answer) {
  string p
  if ((guess < answer))  {
    p = "too low"
  } else {
    p = "too high"
  }
  return p
}

string responseSuffix(int i, int g) {
  string s
  if ((i < g))  {
    s = "guess again"
  } else {
    s = "you lose"
  }
  return s
}

void play(int answer, int GUESSES) {
  int i = 0
  print "you have", GUESSES, "tries to guess the number between 1 and 10"
  do {
    read guess
    if ((guess == answer))  {
      print "you got it in", (i + 1)
      i = GUESSES
    } else {
      i = (i + 1)
      print ((responsePrefix(guess, answer) + ", ") + responseSuffix(i, GUESSES))
    }
  } while ((i < GUESSES))

  print "game over"
}

play(10, 3)

----------AST

NBlock
  NFuncDecl string responsePrefix
    NBlock
      NVarDecl string p
      NBranch
        NBinaryOp <
          NIdentifier guess
          NIdentifier answer
        NBlock
          NAssign p
            NString "too low"
        NBlock
          NAssign p
            NString "too high"
      NReturn
        NIdentifier p
  NFuncDecl string responseSuffix
    NBlock
      NVarDecl string s
      NBranch
        NBinaryOp <
          NIdentifier i
          NIdentifier g
        NBlock
          NAssign s
            NString "guess again"
        NBlock
          NAssign s
            NString "you lose"
      NReturn
        NIdentifier s
  NFuncDecl void play
    NBlock
      NVarDecl int i
        NNumber 0
      NPrint
        NString "you have"
        NIdentifier GUESSES
        NString "tries to guess the number between 1 and 10"
      NDoWhile
        NBinaryOp <
          NIdentifier i
          NIdentifier GUESSES
        NBlock
          NRead guess
          NBranch
            NBinaryOp ==
              NIdentifier guess
              NIdentifier answer
            NBlock
              NPrint
                NString "you got it in"
                NBinaryOp +
                  NIdentifier i
                  NNumber 1
              NAssign i
                NIdentifier GUESSES
            NBlock
              NAssign i
                NBinaryOp +
                  NIdentifier i
                  NNumber 1
              NPrint
                NBinaryOp +
                  NBinaryOp +
                    NFuncCall responsePrefix
                      NIdentifier guess
                      NIdentifier answer
                    NString ", "
                  NFuncCall responseSuffix
                    NIdentifier i
                    NIdentifier GUESSES
      NPrint
        NString "game over"
  NFuncCall play
    NNumber 10
    NNumber 3

----------evaluation

you have 3 tries to guess the number between 1 and 10
>> 8
too low, guess again
>> 2
too low, guess again
>> 13
too high, you lose
game over


----------final state

guess => 13
i => 3
p => too high
play => (int, int) -> void
responsePrefix => (int, int) -> string
responseSuffix => (int, int) -> string
s => you lose
